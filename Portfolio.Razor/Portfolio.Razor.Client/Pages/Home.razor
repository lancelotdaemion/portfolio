@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@using Portfolio.Blazor
@using MudBlazor
@using System.Collections.ObjectModel
@using System.Net.Http
@using System.Net.Http.Json

<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

<script src="_content/MudBlazor/MudBlazor.min.js"></script>

<PageTitle>Home</PageTitle>

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<MudDataGrid Items="@_ipsums" RowStyleFunc="RowStyleFunc">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <PropertyColumn Property="x => x.Value" Title="Value" />
        <TemplateColumn>
            <HeaderTemplate>
                Percentage Changed
            </HeaderTemplate>
            <CellTemplate>
                @if (context.Item.PercentageChange < 0)
                {
                    <MudIcon Icon="@Icons.Material.Filled.ArrowDownward" Color="Color.Error"></MudIcon>
                    <span style="color: red;">@context.Item.PercentageChange</span>
                }
                else if (context.Item.PercentageChange > 0){
                    <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Success"></MudIcon>
                    <span style="color: green;">@context.Item.PercentageChange</span>
                }
                else{
                    <span>@context.Item.PercentageChange</span>
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private HubConnection _hubConnection;
    private ObservableCollection<LoremIpsum> _ipsums;

    protected override async Task OnInitializedAsync()
    {
        using (var httpClient = new HttpClient())
        {
            var client = new HttpClient();

            using (var response = await client.GetAsync("https://localhost:7055/api/Ipsums"))
            {
                _ipsums = await response.Content.ReadFromJsonAsync<ObservableCollection<LoremIpsum>>();
            }
        }



        _hubConnection = new HubConnectionBuilder()
                                .WithUrl("https://localhost:7055/lorem_ipsum_notifications")
                                .Build();

        _hubConnection.On<LoremIpsum>("ReceivedNotification", ipsum =>
        {
            switch (ipsum.Type) {
                case LoremIpsumType.Add:
                    _ipsums.Add(ipsum);

                    break;
                case LoremIpsumType.Edit:
                    var editIndex = _ipsums.IndexOf(_ipsums.Where(X => X.Id == ipsum.Id).Single());

                    _ipsums[editIndex] = ipsum;

                    break;
                case LoremIpsumType.Delete:
                    var deleteIndex = _ipsums.IndexOf(_ipsums.Where(X => X.Id == ipsum.Id).Single());

                    _ipsums.RemoveAt(deleteIndex);

                    break;
                case LoremIpsumType.DeleteAll:
                    _ipsums.Clear();
                    break;
            }

            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private string RowStyleFunc(LoremIpsum lorem, int index)
    {
        return index % 2 == 0 ? "background-color:white" : "background-color:#fffaf0";
    }

    private string CellStyleFunc(decimal percentage)
    {


        return "font-weight:700;color:red!important;font-size:1.5em;background-color:yellow;";
    }

    private Func<LoremIpsum, string> _cellStyleFunc => x =>
    {
        if (x.PercentageChange < 0)
            return "color:red!important;";
        else if (x.PercentageChange > 0)
            return "color:green!important;";
        else
            return "color:black!important;";
    };

    public string cellTemplate { 
        get { 
            
            return ""; 
        }
    }
}